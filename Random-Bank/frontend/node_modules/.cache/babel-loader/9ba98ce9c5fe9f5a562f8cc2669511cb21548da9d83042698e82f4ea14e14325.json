{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT0001\\\\Desktop\\\\Persona Final\\\\Random-Bank\\\\frontend\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [darkMode, setDarkMode] = useState(() => {\n    // Check if user has previously set a preference\n    const savedTheme = localStorage.getItem('theme');\n    // Check if system prefers dark mode\n    const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    // Return true if saved theme is 'dark' or if no saved theme and system prefers dark\n    return savedTheme === 'dark' || !savedTheme && systemPrefersDark;\n  });\n\n  // Update localStorage and document class when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  // Toggle between dark and light mode\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"tZYYgLU58HvSNwYwwO3hYx8XneU=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","darkMode","setDarkMode","savedTheme","localStorage","getItem","systemPrefersDark","window","matchMedia","matches","setItem","document","documentElement","classList","add","remove","toggleTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["C:/Users/KIIT0001/Desktop/Persona Final/Random-Bank/frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [darkMode, setDarkMode] = useState(() => {\n    // Check if user has previously set a preference\n    const savedTheme = localStorage.getItem('theme');\n    // Check if system prefers dark mode\n    const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    // Return true if saved theme is 'dark' or if no saved theme and system prefers dark\n    return savedTheme === 'dark' || (!savedTheme && systemPrefersDark);\n  });\n\n  // Update localStorage and document class when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  // Toggle between dark and light mode\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ darkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,MAAM;IAC7C;IACA,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD;IACA,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;;IAExG;IACA,OAAON,UAAU,KAAK,MAAM,IAAK,CAACA,UAAU,IAAIG,iBAAkB;EACpE,CAAC,CAAC;;EAEF;EACAZ,SAAS,CAAC,MAAM;IACdU,YAAY,CAACM,OAAO,CAAC,OAAO,EAAET,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;IAC1D,IAAIA,QAAQ,EAAE;MACZU,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBd,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,oBACEL,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,QAAQ;MAAEe;IAAY,CAAE;IAAAjB,QAAA,EACrDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACtB,EAAA,CA/BWF,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AAiC1B,OAAO,MAAM0B,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMhC,UAAU,CAACI,YAAY,CAAC;AAAA;AAAC4B,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}